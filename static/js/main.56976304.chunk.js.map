{"version":3,"sources":["calculate/calculateAllChords.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["pitchSets","stringRanges","stringSets","pitchesForStrings","strings","pitchSet","result","min","max","_","k","includes","push","allChords","Object","entries","forEach","entry","type","set","pos","rotation","rotated","map","p","pitches","fingeredNotes","pitch","semitonesFromBase","isTonic","relativeTonicPosition","calculateAllChords","console","log","App","React","useState","column","setColumn","row","setRow","index","useEffect","window","addEventListener","e","key","prev","Math","id","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.56976304.chunk.js","sourcesContent":["import { IChord, SeventhType } from '../@types';\nimport * as _ from 'lodash'\n\nconst pitchSets = {\n    'Major': [0,4,7,11],\n    'Dominant': [0,4,7,10],\n    'Minor': [0,3,7,10],\n    'Minor/Major': [0,4,8,11],\n    'Augmented': [0,4,8,11],\n    'Half-Diminished': [0,3,6,10],\n    'Diminished': [0,3,6,9],\n}\n\nconst stringRanges = [\n    [0, 4],\n    [5, 9],\n    [10, 14],\n    [15, 18],\n    [19,23],\n    [24,28]\n]\n\nconst stringSets = [\n    [0,1,2],\n    [1,2,3],\n    [2,3,4],\n    [3,4,5],\n    [0,1,2,3,4,5],\n]\n\nfunction rotatePitchSet(pitchSet: number[], rotation: number): number[] {\n    return pitchSet.map(p => (p + rotation) % 12)\n}\n\nfunction pitchesForStrings(strings: number[], pitchSet: number[]): number[] {\n    const result: number[] = []\n\n    const min = stringRanges[strings[0]][0];\n    const max = stringRanges[_.last(strings) as number][1];\n\n    for (let k = min; k <= max; k++) {\n        if (pitchSet.includes(k % 12)) result.push(k)\n    }\n\n    return result\n}\n\nexport function calculateAllChords(): IChord[] {\n    const result: IChord[] = []\n\n    Object.entries(pitchSets).forEach(entry => {\n        const [type, set] = entry as [SeventhType, number[]]\n        for (let strings of stringSets) {\n            for (let pos = 0; pos <= 11; pos++) {\n                const rotated = rotatePitchSet(set, pos)\n                const pitches = pitchesForStrings(strings, rotated)\n                result.push({\n                    fingeredNotes: pitches.map(pitch => ({\n                        semitonesFromBase: pitch,\n                        isTonic: pitch % 12 === pos\n                    })),\n                    type,\n                    strings,\n                    relativeTonicPosition: pos\n                })\n            }\n        }\n    })\n\n    return result\n}\n","import React from 'react';\nimport './App.css';\n\nimport { GuitarChordDiagram } from '@musicenviro/ui-elements'\nimport { calculateAllChords } from './calculate/calculateAllChords';\n\n\nconst allChords = calculateAllChords()\nconsole.log(allChords[0].fingeredNotes)\n\nfunction App() {\n\tconst [column, setColumn] = React.useState<number>(0)\n\tconst [row, setRow] = React.useState<number>(0)\n\n\tconst index = (row: number, column: number) => row * 12 + column\n\n\tReact.useEffect(() => {\n\t\twindow.addEventListener(\"keydown\", (e: KeyboardEvent) => {\n\t\t\tswitch (e.key) {\n\t\t\t\tcase 'ArrowLeft':\n\t\t\t\t\tsetColumn(prev => (prev + 11) % 12) // like -1\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ArrowRight':\n\t\t\t\t\tsetColumn(prev => (prev + 1) % 12)\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ArrowUp':\n\t\t\t\t\tsetRow(prev => Math.max(0, prev - 1))\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ArrowDown':\n\t\t\t\t\tsetRow(prev => Math.min(34, prev + 1))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t})\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t\t<header>GUITAR CHORD DIAGRAM BROWSER</header>\n\t\t\t<div id=\"main\">\n\t\t\t\t<div className=\"label\" id=\"chordType\">{allChords[index(row, column)].type} 7th</div>\n\t\t\t\t<div className=\"label\" id=\"strings\">{allChords[index(row, column)].strings}</div>\n\t\t\t\t<div className=\"label\" id=\"column\">{column}</div>\n\n\t\t\t\t<div id=\"diagram-container\">\n\t\t\t\t\t<GuitarChordDiagram fingeredNotes={allChords[index(row, column)].fingeredNotes} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}